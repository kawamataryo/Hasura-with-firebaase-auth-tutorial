# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: query_root
    mutation: mutation_root
    subscription: subscription_root
}

"columns and relationships of \"memos\""
type memos {
    content: String!
    created_at: timestamptz!
    id: Int!
    user_id: String!
}

"aggregated selection of \"memos\""
type memos_aggregate {
    aggregate: memos_aggregate_fields
    nodes: [memos!]!
}

"aggregate fields of \"memos\""
type memos_aggregate_fields {
    avg: memos_avg_fields
    count(columns: [memos_select_column!], distinct: Boolean): Int
    max: memos_max_fields
    min: memos_min_fields
    stddev: memos_stddev_fields
    stddev_pop: memos_stddev_pop_fields
    stddev_samp: memos_stddev_samp_fields
    sum: memos_sum_fields
    var_pop: memos_var_pop_fields
    var_samp: memos_var_samp_fields
    variance: memos_variance_fields
}

"aggregate avg on columns"
type memos_avg_fields {
    id: Float
}

"aggregate max on columns"
type memos_max_fields {
    content: String
    created_at: timestamptz
    id: Int
    user_id: String
}

"aggregate min on columns"
type memos_min_fields {
    content: String
    created_at: timestamptz
    id: Int
    user_id: String
}

"response of any mutation on the table \"memos\""
type memos_mutation_response {
    "number of affected rows by the mutation"
    affected_rows: Int!
    "data of the affected rows by the mutation"
    returning: [memos!]!
}

"aggregate stddev on columns"
type memos_stddev_fields {
    id: Float
}

"aggregate stddev_pop on columns"
type memos_stddev_pop_fields {
    id: Float
}

"aggregate stddev_samp on columns"
type memos_stddev_samp_fields {
    id: Float
}

"aggregate sum on columns"
type memos_sum_fields {
    id: Int
}

"aggregate var_pop on columns"
type memos_var_pop_fields {
    id: Float
}

"aggregate var_samp on columns"
type memos_var_samp_fields {
    id: Float
}

"aggregate variance on columns"
type memos_variance_fields {
    id: Float
}

"mutation root"
type mutation_root {
    "delete data from the table: \"memos\""
    delete_memos(
        #filter the rows which have to be deleted
        where: memos_bool_exp!
    ): memos_mutation_response
    "delete data from the table: \"users\""
    delete_users(
        #filter the rows which have to be deleted
        where: users_bool_exp!
    ): users_mutation_response
    "insert data into the table: \"memos\""
    insert_memos(
        #the rows to be inserted
        objects: [memos_insert_input!]!,
        #on conflict condition
        on_conflict: memos_on_conflict
    ): memos_mutation_response
    "insert data into the table: \"users\""
    insert_users(
        #the rows to be inserted
        objects: [users_insert_input!]!,
        #on conflict condition
        on_conflict: users_on_conflict
    ): users_mutation_response
    "update data of the table: \"memos\""
    update_memos(
        #increments the integer columns with given value of the filtered values
        _inc: memos_inc_input,
        #sets the columns of the filtered rows to the given values
        _set: memos_set_input,
        #filter the rows which have to be updated
        where: memos_bool_exp!
    ): memos_mutation_response
    "update data of the table: \"users\""
    update_users(
        #sets the columns of the filtered rows to the given values
        _set: users_set_input,
        #filter the rows which have to be updated
        where: users_bool_exp!
    ): users_mutation_response
}

"query root"
type query_root {
    "fetch data from the table: \"memos\""
    memos(
        #distinct select on columns
        distinct_on: [memos_select_column!],
        #limit the number of rows returned
        limit: Int,
        #skip the first n rows. Use only with order_by
        offset: Int,
        #sort the rows by one or more columns
        order_by: [memos_order_by!],
        #filter the rows returned
        where: memos_bool_exp
    ): [memos!]!
    "fetch aggregated fields from the table: \"memos\""
    memos_aggregate(
        #distinct select on columns
        distinct_on: [memos_select_column!],
        #limit the number of rows returned
        limit: Int,
        #skip the first n rows. Use only with order_by
        offset: Int,
        #sort the rows by one or more columns
        order_by: [memos_order_by!],
        #filter the rows returned
        where: memos_bool_exp
    ): memos_aggregate!
    "fetch data from the table: \"memos\" using primary key columns"
    memos_by_pk(id: Int!): memos
    "fetch data from the table: \"users\""
    users(
        #distinct select on columns
        distinct_on: [users_select_column!],
        #limit the number of rows returned
        limit: Int,
        #skip the first n rows. Use only with order_by
        offset: Int,
        #sort the rows by one or more columns
        order_by: [users_order_by!],
        #filter the rows returned
        where: users_bool_exp
    ): [users!]!
    "fetch aggregated fields from the table: \"users\""
    users_aggregate(
        #distinct select on columns
        distinct_on: [users_select_column!],
        #limit the number of rows returned
        limit: Int,
        #skip the first n rows. Use only with order_by
        offset: Int,
        #sort the rows by one or more columns
        order_by: [users_order_by!],
        #filter the rows returned
        where: users_bool_exp
    ): users_aggregate!
    "fetch data from the table: \"users\" using primary key columns"
    users_by_pk(id: String!): users
}

"subscription root"
type subscription_root {
    "fetch data from the table: \"memos\""
    memos(
        #distinct select on columns
        distinct_on: [memos_select_column!],
        #limit the number of rows returned
        limit: Int,
        #skip the first n rows. Use only with order_by
        offset: Int,
        #sort the rows by one or more columns
        order_by: [memos_order_by!],
        #filter the rows returned
        where: memos_bool_exp
    ): [memos!]!
    "fetch aggregated fields from the table: \"memos\""
    memos_aggregate(
        #distinct select on columns
        distinct_on: [memos_select_column!],
        #limit the number of rows returned
        limit: Int,
        #skip the first n rows. Use only with order_by
        offset: Int,
        #sort the rows by one or more columns
        order_by: [memos_order_by!],
        #filter the rows returned
        where: memos_bool_exp
    ): memos_aggregate!
    "fetch data from the table: \"memos\" using primary key columns"
    memos_by_pk(id: Int!): memos
    "fetch data from the table: \"users\""
    users(
        #distinct select on columns
        distinct_on: [users_select_column!],
        #limit the number of rows returned
        limit: Int,
        #skip the first n rows. Use only with order_by
        offset: Int,
        #sort the rows by one or more columns
        order_by: [users_order_by!],
        #filter the rows returned
        where: users_bool_exp
    ): [users!]!
    "fetch aggregated fields from the table: \"users\""
    users_aggregate(
        #distinct select on columns
        distinct_on: [users_select_column!],
        #limit the number of rows returned
        limit: Int,
        #skip the first n rows. Use only with order_by
        offset: Int,
        #sort the rows by one or more columns
        order_by: [users_order_by!],
        #filter the rows returned
        where: users_bool_exp
    ): users_aggregate!
    "fetch data from the table: \"users\" using primary key columns"
    users_by_pk(id: String!): users
}

"columns and relationships of \"users\""
type users {
    created_at: timestamptz!
    id: String!
    name: String!
}

"aggregated selection of \"users\""
type users_aggregate {
    aggregate: users_aggregate_fields
    nodes: [users!]!
}

"aggregate fields of \"users\""
type users_aggregate_fields {
    count(columns: [users_select_column!], distinct: Boolean): Int
    max: users_max_fields
    min: users_min_fields
}

"aggregate max on columns"
type users_max_fields {
    created_at: timestamptz
    id: String
    name: String
}

"aggregate min on columns"
type users_min_fields {
    created_at: timestamptz
    id: String
    name: String
}

"response of any mutation on the table \"users\""
type users_mutation_response {
    "number of affected rows by the mutation"
    affected_rows: Int!
    "data of the affected rows by the mutation"
    returning: [users!]!
}

"unique or primary key constraints on table \"memos\""
enum memos_constraint {
    #unique or primary key constraint
    memos_pkey
}

"select columns of table \"memos\""
enum memos_select_column {
    #column name
    content
    #column name
    created_at
    #column name
    id
    #column name
    user_id
}

"update columns of table \"memos\""
enum memos_update_column {
    #column name
    content
    #column name
    created_at
    #column name
    id
    #column name
    user_id
}

"column ordering options"
enum order_by {
    #in the ascending order, nulls last
    asc
    #in the ascending order, nulls first
    asc_nulls_first
    #in the ascending order, nulls last
    asc_nulls_last
    #in the descending order, nulls first
    desc
    #in the descending order, nulls first
    desc_nulls_first
    #in the descending order, nulls last
    desc_nulls_last
}

"unique or primary key constraints on table \"users\""
enum users_constraint {
    #unique or primary key constraint
    users_pkey
}

"select columns of table \"users\""
enum users_select_column {
    #column name
    created_at
    #column name
    id
    #column name
    name
}

"update columns of table \"users\""
enum users_update_column {
    #column name
    created_at
    #column name
    id
    #column name
    name
}

"expression to compare columns of type Int. All fields are combined with logical 'AND'."
input Int_comparison_exp {
    _eq: Int
    _gt: Int
    _gte: Int
    _in: [Int!]
    _is_null: Boolean
    _lt: Int
    _lte: Int
    _neq: Int
    _nin: [Int!]
}

"expression to compare columns of type String. All fields are combined with logical 'AND'."
input String_comparison_exp {
    _eq: String
    _gt: String
    _gte: String
    _ilike: String
    _in: [String!]
    _is_null: Boolean
    _like: String
    _lt: String
    _lte: String
    _neq: String
    _nilike: String
    _nin: [String!]
    _nlike: String
    _nsimilar: String
    _similar: String
}

"order by aggregate values of table \"memos\""
input memos_aggregate_order_by {
    avg: memos_avg_order_by
    count: order_by
    max: memos_max_order_by
    min: memos_min_order_by
    stddev: memos_stddev_order_by
    stddev_pop: memos_stddev_pop_order_by
    stddev_samp: memos_stddev_samp_order_by
    sum: memos_sum_order_by
    var_pop: memos_var_pop_order_by
    var_samp: memos_var_samp_order_by
    variance: memos_variance_order_by
}

"input type for inserting array relation for remote table \"memos\""
input memos_arr_rel_insert_input {
    data: [memos_insert_input!]!
    on_conflict: memos_on_conflict
}

"order by avg() on columns of table \"memos\""
input memos_avg_order_by {
    id: order_by
}

"Boolean expression to filter rows from the table \"memos\". All fields are combined with a logical 'AND'."
input memos_bool_exp {
    _and: [memos_bool_exp]
    _not: memos_bool_exp
    _or: [memos_bool_exp]
    content: String_comparison_exp
    created_at: timestamptz_comparison_exp
    id: Int_comparison_exp
    user_id: String_comparison_exp
}

"input type for incrementing integer columne in table \"memos\""
input memos_inc_input {
    id: Int
}

"input type for inserting data into table \"memos\""
input memos_insert_input {
    content: String
    created_at: timestamptz
    id: Int
    user_id: String
}

"order by max() on columns of table \"memos\""
input memos_max_order_by {
    content: order_by
    created_at: order_by
    id: order_by
    user_id: order_by
}

"order by min() on columns of table \"memos\""
input memos_min_order_by {
    content: order_by
    created_at: order_by
    id: order_by
    user_id: order_by
}

"input type for inserting object relation for remote table \"memos\""
input memos_obj_rel_insert_input {
    data: memos_insert_input!
    on_conflict: memos_on_conflict
}

"on conflict condition type for table \"memos\""
input memos_on_conflict {
    constraint: memos_constraint!
    update_columns: [memos_update_column!]!
    where: memos_bool_exp
}

"ordering options when selecting data from \"memos\""
input memos_order_by {
    content: order_by
    created_at: order_by
    id: order_by
    user_id: order_by
}

"input type for updating data in table \"memos\""
input memos_set_input {
    content: String
    created_at: timestamptz
    id: Int
    user_id: String
}

"order by stddev() on columns of table \"memos\""
input memos_stddev_order_by {
    id: order_by
}

"order by stddev_pop() on columns of table \"memos\""
input memos_stddev_pop_order_by {
    id: order_by
}

"order by stddev_samp() on columns of table \"memos\""
input memos_stddev_samp_order_by {
    id: order_by
}

"order by sum() on columns of table \"memos\""
input memos_sum_order_by {
    id: order_by
}

"order by var_pop() on columns of table \"memos\""
input memos_var_pop_order_by {
    id: order_by
}

"order by var_samp() on columns of table \"memos\""
input memos_var_samp_order_by {
    id: order_by
}

"order by variance() on columns of table \"memos\""
input memos_variance_order_by {
    id: order_by
}

"expression to compare columns of type timestamptz. All fields are combined with logical 'AND'."
input timestamptz_comparison_exp {
    _eq: timestamptz
    _gt: timestamptz
    _gte: timestamptz
    _in: [timestamptz!]
    _is_null: Boolean
    _lt: timestamptz
    _lte: timestamptz
    _neq: timestamptz
    _nin: [timestamptz!]
}

"order by aggregate values of table \"users\""
input users_aggregate_order_by {
    count: order_by
    max: users_max_order_by
    min: users_min_order_by
}

"input type for inserting array relation for remote table \"users\""
input users_arr_rel_insert_input {
    data: [users_insert_input!]!
    on_conflict: users_on_conflict
}

"Boolean expression to filter rows from the table \"users\". All fields are combined with a logical 'AND'."
input users_bool_exp {
    _and: [users_bool_exp]
    _not: users_bool_exp
    _or: [users_bool_exp]
    created_at: timestamptz_comparison_exp
    id: String_comparison_exp
    name: String_comparison_exp
}

"input type for inserting data into table \"users\""
input users_insert_input {
    created_at: timestamptz
    id: String
    name: String
}

"order by max() on columns of table \"users\""
input users_max_order_by {
    created_at: order_by
    id: order_by
    name: order_by
}

"order by min() on columns of table \"users\""
input users_min_order_by {
    created_at: order_by
    id: order_by
    name: order_by
}

"input type for inserting object relation for remote table \"users\""
input users_obj_rel_insert_input {
    data: users_insert_input!
    on_conflict: users_on_conflict
}

"on conflict condition type for table \"users\""
input users_on_conflict {
    constraint: users_constraint!
    update_columns: [users_update_column!]!
    where: users_bool_exp
}

"ordering options when selecting data from \"users\""
input users_order_by {
    created_at: order_by
    id: order_by
    name: order_by
}

"input type for updating data in table \"users\""
input users_set_input {
    created_at: timestamptz
    id: String
    name: String
}


scalar timestamptz
